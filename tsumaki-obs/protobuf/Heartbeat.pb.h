// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Heartbeat.proto

#ifndef PROTOBUF_Heartbeat_2eproto__INCLUDED
#define PROTOBUF_Heartbeat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tsumaki {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Heartbeat_2eproto();
void protobuf_AssignDesc_Heartbeat_2eproto();
void protobuf_ShutdownFile_Heartbeat_2eproto();

class HeartbeatRequest;
class HeartbeatResponse;

// ===================================================================

class HeartbeatRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsumaki.HeartbeatRequest) */ {
 public:
  HeartbeatRequest();
  virtual ~HeartbeatRequest();

  HeartbeatRequest(const HeartbeatRequest& from);

  inline HeartbeatRequest& operator=(const HeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatRequest& default_instance();

  void Swap(HeartbeatRequest* other);

  // implements Message ----------------------------------------------

  inline HeartbeatRequest* New() const { return New(NULL); }

  HeartbeatRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartbeatRequest& from);
  void MergeFrom(const HeartbeatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartbeatRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hello = 1;
  void clear_hello();
  static const int kHelloFieldNumber = 1;
  const ::std::string& hello() const;
  void set_hello(const ::std::string& value);
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  ::std::string* mutable_hello();
  ::std::string* release_hello();
  void set_allocated_hello(::std::string* hello);

  // @@protoc_insertion_point(class_scope:tsumaki.HeartbeatRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hello_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Heartbeat_2eproto();
  friend void protobuf_AssignDesc_Heartbeat_2eproto();
  friend void protobuf_ShutdownFile_Heartbeat_2eproto();

  void InitAsDefaultInstance();
  static HeartbeatRequest* default_instance_;
};
// -------------------------------------------------------------------

class HeartbeatResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsumaki.HeartbeatResponse) */ {
 public:
  HeartbeatResponse();
  virtual ~HeartbeatResponse();

  HeartbeatResponse(const HeartbeatResponse& from);

  inline HeartbeatResponse& operator=(const HeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatResponse& default_instance();

  void Swap(HeartbeatResponse* other);

  // implements Message ----------------------------------------------

  inline HeartbeatResponse* New() const { return New(NULL); }

  HeartbeatResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartbeatResponse& from);
  void MergeFrom(const HeartbeatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartbeatResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hello = 1;
  void clear_hello();
  static const int kHelloFieldNumber = 1;
  const ::std::string& hello() const;
  void set_hello(const ::std::string& value);
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  ::std::string* mutable_hello();
  ::std::string* release_hello();
  void set_allocated_hello(::std::string* hello);

  // @@protoc_insertion_point(class_scope:tsumaki.HeartbeatResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr hello_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Heartbeat_2eproto();
  friend void protobuf_AssignDesc_Heartbeat_2eproto();
  friend void protobuf_ShutdownFile_Heartbeat_2eproto();

  void InitAsDefaultInstance();
  static HeartbeatResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatRequest

// optional string hello = 1;
inline void HeartbeatRequest::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartbeatRequest::hello() const {
  // @@protoc_insertion_point(field_get:tsumaki.HeartbeatRequest.hello)
  return hello_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatRequest::set_hello(const ::std::string& value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.HeartbeatRequest.hello)
}
inline void HeartbeatRequest::set_hello(const char* value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.HeartbeatRequest.hello)
}
inline void HeartbeatRequest::set_hello(const char* value, size_t size) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.HeartbeatRequest.hello)
}
inline ::std::string* HeartbeatRequest::mutable_hello() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.HeartbeatRequest.hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartbeatRequest::release_hello() {
  // @@protoc_insertion_point(field_release:tsumaki.HeartbeatRequest.hello)
  
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatRequest::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    
  } else {
    
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.HeartbeatRequest.hello)
}

// -------------------------------------------------------------------

// HeartbeatResponse

// optional string hello = 1;
inline void HeartbeatResponse::clear_hello() {
  hello_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartbeatResponse::hello() const {
  // @@protoc_insertion_point(field_get:tsumaki.HeartbeatResponse.hello)
  return hello_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatResponse::set_hello(const ::std::string& value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.HeartbeatResponse.hello)
}
inline void HeartbeatResponse::set_hello(const char* value) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.HeartbeatResponse.hello)
}
inline void HeartbeatResponse::set_hello(const char* value, size_t size) {
  
  hello_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.HeartbeatResponse.hello)
}
inline ::std::string* HeartbeatResponse::mutable_hello() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.HeartbeatResponse.hello)
  return hello_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartbeatResponse::release_hello() {
  // @@protoc_insertion_point(field_release:tsumaki.HeartbeatResponse.hello)
  
  return hello_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatResponse::set_allocated_hello(::std::string* hello) {
  if (hello != NULL) {
    
  } else {
    
  }
  hello_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.HeartbeatResponse.hello)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tsumaki

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Heartbeat_2eproto__INCLUDED
