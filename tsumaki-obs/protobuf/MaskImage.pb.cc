// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MaskImage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MaskImage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tsumaki {

namespace {

const ::google::protobuf::Descriptor* MaskImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaskImage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MaskImage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_MaskImage_2eproto() {
  protobuf_AddDesc_MaskImage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MaskImage.proto");
  GOOGLE_CHECK(file != NULL);
  MaskImage_descriptor_ = file->message_type(0);
  static const int MaskImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskImage, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskImage, data_),
  };
  MaskImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MaskImage_descriptor_,
      MaskImage::default_instance_,
      MaskImage_offsets_,
      -1,
      -1,
      -1,
      sizeof(MaskImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskImage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaskImage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MaskImage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MaskImage_descriptor_, &MaskImage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MaskImage_2eproto() {
  delete MaskImage::default_instance_;
  delete MaskImage_reflection_;
}

void protobuf_AddDesc_MaskImage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_MaskImage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017MaskImage.proto\022\007tsumaki\"8\n\tMaskImage\022"
    "\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\014\n\004data\030\003"
    " \001(\014B\002H\001b\006proto3", 96);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MaskImage.proto", &protobuf_RegisterTypes);
  MaskImage::default_instance_ = new MaskImage();
  MaskImage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MaskImage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MaskImage_2eproto {
  StaticDescriptorInitializer_MaskImage_2eproto() {
    protobuf_AddDesc_MaskImage_2eproto();
  }
} static_descriptor_initializer_MaskImage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MaskImage::kWidthFieldNumber;
const int MaskImage::kHeightFieldNumber;
const int MaskImage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MaskImage::MaskImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsumaki.MaskImage)
}

void MaskImage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MaskImage::MaskImage(const MaskImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsumaki.MaskImage)
}

void MaskImage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MaskImage::~MaskImage() {
  // @@protoc_insertion_point(destructor:tsumaki.MaskImage)
  SharedDtor();
}

void MaskImage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MaskImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaskImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaskImage_descriptor_;
}

const MaskImage& MaskImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MaskImage_2eproto();
  return *default_instance_;
}

MaskImage* MaskImage::default_instance_ = NULL;

MaskImage* MaskImage::New(::google::protobuf::Arena* arena) const {
  MaskImage* n = new MaskImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MaskImage::Clear() {
// @@protoc_insertion_point(message_clear_start:tsumaki.MaskImage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MaskImage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MaskImage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MaskImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsumaki.MaskImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsumaki.MaskImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsumaki.MaskImage)
  return false;
#undef DO_
}

void MaskImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsumaki.MaskImage)
  // optional int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:tsumaki.MaskImage)
}

::google::protobuf::uint8* MaskImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsumaki.MaskImage)
  // optional int32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tsumaki.MaskImage)
  return target;
}

int MaskImage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tsumaki.MaskImage)
  int total_size = 0;

  // optional int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaskImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tsumaki.MaskImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MaskImage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MaskImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tsumaki.MaskImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tsumaki.MaskImage)
    MergeFrom(*source);
  }
}

void MaskImage::MergeFrom(const MaskImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tsumaki.MaskImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void MaskImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tsumaki.MaskImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaskImage::CopyFrom(const MaskImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tsumaki.MaskImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaskImage::IsInitialized() const {

  return true;
}

void MaskImage::Swap(MaskImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MaskImage::InternalSwap(MaskImage* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MaskImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaskImage_descriptor_;
  metadata.reflection = MaskImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MaskImage

// optional int32 width = 1;
void MaskImage::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 MaskImage::width() const {
  // @@protoc_insertion_point(field_get:tsumaki.MaskImage.width)
  return width_;
}
 void MaskImage::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.MaskImage.width)
}

// optional int32 height = 2;
void MaskImage::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 MaskImage::height() const {
  // @@protoc_insertion_point(field_get:tsumaki.MaskImage.height)
  return height_;
}
 void MaskImage::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.MaskImage.height)
}

// optional bytes data = 3;
void MaskImage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MaskImage::data() const {
  // @@protoc_insertion_point(field_get:tsumaki.MaskImage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MaskImage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.MaskImage.data)
}
 void MaskImage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.MaskImage.data)
}
 void MaskImage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.MaskImage.data)
}
 ::std::string* MaskImage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.MaskImage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MaskImage::release_data() {
  // @@protoc_insertion_point(field_release:tsumaki.MaskImage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MaskImage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.MaskImage.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tsumaki

// @@protoc_insertion_point(global_scope)
