// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SetupDevice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SetupDevice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tsumaki {

namespace {

const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetupDeviceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetupDeviceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetupDeviceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetupDeviceResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SetupDevice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_SetupDevice_2eproto() {
  protobuf_AddDesc_SetupDevice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SetupDevice.proto");
  GOOGLE_CHECK(file != NULL);
  Device_descriptor_ = file->message_type(0);
  static const int Device_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, experimental_),
  };
  Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      -1,
      -1,
      -1,
      sizeof(Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _is_default_instance_));
  SetupDeviceRequest_descriptor_ = file->message_type(1);
  static const int SetupDeviceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupDeviceRequest, target_device_id_),
  };
  SetupDeviceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetupDeviceRequest_descriptor_,
      SetupDeviceRequest::default_instance_,
      SetupDeviceRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetupDeviceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupDeviceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupDeviceRequest, _is_default_instance_));
  SetupDeviceResponse_descriptor_ = file->message_type(2);
  static const int SetupDeviceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupDeviceResponse, current_device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupDeviceResponse, available_devices_),
  };
  SetupDeviceResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetupDeviceResponse_descriptor_,
      SetupDeviceResponse::default_instance_,
      SetupDeviceResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetupDeviceResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupDeviceResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetupDeviceResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SetupDevice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Device_descriptor_, &Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetupDeviceRequest_descriptor_, &SetupDeviceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetupDeviceResponse_descriptor_, &SetupDeviceResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SetupDevice_2eproto() {
  delete Device::default_instance_;
  delete Device_reflection_;
  delete SetupDeviceRequest::default_instance_;
  delete SetupDeviceRequest_reflection_;
  delete SetupDeviceResponse::default_instance_;
  delete SetupDeviceResponse_reflection_;
}

void protobuf_AddDesc_SetupDevice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_SetupDevice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SetupDevice.proto\022\007tsumaki\"\?\n\006Device\022\n"
    "\n\002id\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\024\n\014exper"
    "imental\030\003 \001(\010\".\n\022SetupDeviceRequest\022\030\n\020t"
    "arget_device_id\030\001 \001(\t\"j\n\023SetupDeviceResp"
    "onse\022\'\n\016current_device\030\001 \001(\0132\017.tsumaki.D"
    "evice\022*\n\021available_devices\030\002 \003(\0132\017.tsuma"
    "ki.Device2^\n\022SetupDeviceService\022H\n\013Setup"
    "Device\022\033.tsumaki.SetupDeviceRequest\032\034.ts"
    "umaki.SetupDeviceResponseb\006proto3", 353);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SetupDevice.proto", &protobuf_RegisterTypes);
  Device::default_instance_ = new Device();
  SetupDeviceRequest::default_instance_ = new SetupDeviceRequest();
  SetupDeviceResponse::default_instance_ = new SetupDeviceResponse();
  Device::default_instance_->InitAsDefaultInstance();
  SetupDeviceRequest::default_instance_->InitAsDefaultInstance();
  SetupDeviceResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SetupDevice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SetupDevice_2eproto {
  StaticDescriptorInitializer_SetupDevice_2eproto() {
    protobuf_AddDesc_SetupDevice_2eproto();
  }
} static_descriptor_initializer_SetupDevice_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device::kIdFieldNumber;
const int Device::kDescriptionFieldNumber;
const int Device::kExperimentalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device::Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsumaki.Device)
}

void Device::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Device::Device(const Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsumaki.Device)
}

void Device::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experimental_ = false;
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:tsumaki.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SetupDevice_2eproto();
  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New(::google::protobuf::Arena* arena) const {
  Device* n = new Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:tsumaki.Device)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  experimental_ = false;
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsumaki.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tsumaki.Device.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tsumaki.Device.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_experimental;
        break;
      }

      // optional bool experimental = 3;
      case 3: {
        if (tag == 24) {
         parse_experimental:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &experimental_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsumaki.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsumaki.Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsumaki.Device)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.Device.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.Device.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional bool experimental = 3;
  if (this->experimental() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->experimental(), output);
  }

  // @@protoc_insertion_point(serialize_end:tsumaki.Device)
}

::google::protobuf::uint8* Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsumaki.Device)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.Device.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.Device.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional bool experimental = 3;
  if (this->experimental() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->experimental(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tsumaki.Device)
  return target;
}

int Device::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tsumaki.Device)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // optional bool experimental = 3;
  if (this->experimental() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tsumaki.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Device* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tsumaki.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tsumaki.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tsumaki.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.experimental() != 0) {
    set_experimental(from.experimental());
  }
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tsumaki.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tsumaki.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {

  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  id_.Swap(&other->id_);
  description_.Swap(&other->description_);
  std::swap(experimental_, other->experimental_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device

// optional string id = 1;
void Device::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::id() const {
  // @@protoc_insertion_point(field_get:tsumaki.Device.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.Device.id)
}
 void Device::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.Device.id)
}
 void Device::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.Device.id)
}
 ::std::string* Device::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.Device.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_id() {
  // @@protoc_insertion_point(field_release:tsumaki.Device.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.Device.id)
}

// optional string description = 2;
void Device::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::description() const {
  // @@protoc_insertion_point(field_get:tsumaki.Device.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.Device.description)
}
 void Device::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.Device.description)
}
 void Device::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.Device.description)
}
 ::std::string* Device::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.Device.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_description() {
  // @@protoc_insertion_point(field_release:tsumaki.Device.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.Device.description)
}

// optional bool experimental = 3;
void Device::clear_experimental() {
  experimental_ = false;
}
 bool Device::experimental() const {
  // @@protoc_insertion_point(field_get:tsumaki.Device.experimental)
  return experimental_;
}
 void Device::set_experimental(bool value) {
  
  experimental_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.Device.experimental)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetupDeviceRequest::kTargetDeviceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetupDeviceRequest::SetupDeviceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsumaki.SetupDeviceRequest)
}

void SetupDeviceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetupDeviceRequest::SetupDeviceRequest(const SetupDeviceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsumaki.SetupDeviceRequest)
}

void SetupDeviceRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  target_device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SetupDeviceRequest::~SetupDeviceRequest() {
  // @@protoc_insertion_point(destructor:tsumaki.SetupDeviceRequest)
  SharedDtor();
}

void SetupDeviceRequest::SharedDtor() {
  target_device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SetupDeviceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetupDeviceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetupDeviceRequest_descriptor_;
}

const SetupDeviceRequest& SetupDeviceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SetupDevice_2eproto();
  return *default_instance_;
}

SetupDeviceRequest* SetupDeviceRequest::default_instance_ = NULL;

SetupDeviceRequest* SetupDeviceRequest::New(::google::protobuf::Arena* arena) const {
  SetupDeviceRequest* n = new SetupDeviceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetupDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tsumaki.SetupDeviceRequest)
  target_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetupDeviceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsumaki.SetupDeviceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string target_device_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_device_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_device_id().data(), this->target_device_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tsumaki.SetupDeviceRequest.target_device_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsumaki.SetupDeviceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsumaki.SetupDeviceRequest)
  return false;
#undef DO_
}

void SetupDeviceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsumaki.SetupDeviceRequest)
  // optional string target_device_id = 1;
  if (this->target_device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_device_id().data(), this->target_device_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.SetupDeviceRequest.target_device_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->target_device_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:tsumaki.SetupDeviceRequest)
}

::google::protobuf::uint8* SetupDeviceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsumaki.SetupDeviceRequest)
  // optional string target_device_id = 1;
  if (this->target_device_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_device_id().data(), this->target_device_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.SetupDeviceRequest.target_device_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->target_device_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tsumaki.SetupDeviceRequest)
  return target;
}

int SetupDeviceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tsumaki.SetupDeviceRequest)
  int total_size = 0;

  // optional string target_device_id = 1;
  if (this->target_device_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_device_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetupDeviceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tsumaki.SetupDeviceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetupDeviceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetupDeviceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tsumaki.SetupDeviceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tsumaki.SetupDeviceRequest)
    MergeFrom(*source);
  }
}

void SetupDeviceRequest::MergeFrom(const SetupDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tsumaki.SetupDeviceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.target_device_id().size() > 0) {

    target_device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_device_id_);
  }
}

void SetupDeviceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tsumaki.SetupDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupDeviceRequest::CopyFrom(const SetupDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tsumaki.SetupDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupDeviceRequest::IsInitialized() const {

  return true;
}

void SetupDeviceRequest::Swap(SetupDeviceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetupDeviceRequest::InternalSwap(SetupDeviceRequest* other) {
  target_device_id_.Swap(&other->target_device_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetupDeviceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetupDeviceRequest_descriptor_;
  metadata.reflection = SetupDeviceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetupDeviceRequest

// optional string target_device_id = 1;
void SetupDeviceRequest::clear_target_device_id() {
  target_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SetupDeviceRequest::target_device_id() const {
  // @@protoc_insertion_point(field_get:tsumaki.SetupDeviceRequest.target_device_id)
  return target_device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetupDeviceRequest::set_target_device_id(const ::std::string& value) {
  
  target_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.SetupDeviceRequest.target_device_id)
}
 void SetupDeviceRequest::set_target_device_id(const char* value) {
  
  target_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.SetupDeviceRequest.target_device_id)
}
 void SetupDeviceRequest::set_target_device_id(const char* value, size_t size) {
  
  target_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.SetupDeviceRequest.target_device_id)
}
 ::std::string* SetupDeviceRequest::mutable_target_device_id() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.SetupDeviceRequest.target_device_id)
  return target_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SetupDeviceRequest::release_target_device_id() {
  // @@protoc_insertion_point(field_release:tsumaki.SetupDeviceRequest.target_device_id)
  
  return target_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetupDeviceRequest::set_allocated_target_device_id(::std::string* target_device_id) {
  if (target_device_id != NULL) {
    
  } else {
    
  }
  target_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_device_id);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.SetupDeviceRequest.target_device_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetupDeviceResponse::kCurrentDeviceFieldNumber;
const int SetupDeviceResponse::kAvailableDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetupDeviceResponse::SetupDeviceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsumaki.SetupDeviceResponse)
}

void SetupDeviceResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  current_device_ = const_cast< ::tsumaki::Device*>(&::tsumaki::Device::default_instance());
}

SetupDeviceResponse::SetupDeviceResponse(const SetupDeviceResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsumaki.SetupDeviceResponse)
}

void SetupDeviceResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  current_device_ = NULL;
}

SetupDeviceResponse::~SetupDeviceResponse() {
  // @@protoc_insertion_point(destructor:tsumaki.SetupDeviceResponse)
  SharedDtor();
}

void SetupDeviceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete current_device_;
  }
}

void SetupDeviceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetupDeviceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetupDeviceResponse_descriptor_;
}

const SetupDeviceResponse& SetupDeviceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SetupDevice_2eproto();
  return *default_instance_;
}

SetupDeviceResponse* SetupDeviceResponse::default_instance_ = NULL;

SetupDeviceResponse* SetupDeviceResponse::New(::google::protobuf::Arena* arena) const {
  SetupDeviceResponse* n = new SetupDeviceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetupDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tsumaki.SetupDeviceResponse)
  if (GetArenaNoVirtual() == NULL && current_device_ != NULL) delete current_device_;
  current_device_ = NULL;
  available_devices_.Clear();
}

bool SetupDeviceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsumaki.SetupDeviceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tsumaki.Device current_device = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_available_devices;
        break;
      }

      // repeated .tsumaki.Device available_devices = 2;
      case 2: {
        if (tag == 18) {
         parse_available_devices:
          DO_(input->IncrementRecursionDepth());
         parse_loop_available_devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_available_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_available_devices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsumaki.SetupDeviceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsumaki.SetupDeviceResponse)
  return false;
#undef DO_
}

void SetupDeviceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsumaki.SetupDeviceResponse)
  // optional .tsumaki.Device current_device = 1;
  if (this->has_current_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->current_device_, output);
  }

  // repeated .tsumaki.Device available_devices = 2;
  for (unsigned int i = 0, n = this->available_devices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->available_devices(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tsumaki.SetupDeviceResponse)
}

::google::protobuf::uint8* SetupDeviceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsumaki.SetupDeviceResponse)
  // optional .tsumaki.Device current_device = 1;
  if (this->has_current_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->current_device_, false, target);
  }

  // repeated .tsumaki.Device available_devices = 2;
  for (unsigned int i = 0, n = this->available_devices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->available_devices(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tsumaki.SetupDeviceResponse)
  return target;
}

int SetupDeviceResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tsumaki.SetupDeviceResponse)
  int total_size = 0;

  // optional .tsumaki.Device current_device = 1;
  if (this->has_current_device()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->current_device_);
  }

  // repeated .tsumaki.Device available_devices = 2;
  total_size += 1 * this->available_devices_size();
  for (int i = 0; i < this->available_devices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->available_devices(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetupDeviceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tsumaki.SetupDeviceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetupDeviceResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetupDeviceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tsumaki.SetupDeviceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tsumaki.SetupDeviceResponse)
    MergeFrom(*source);
  }
}

void SetupDeviceResponse::MergeFrom(const SetupDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tsumaki.SetupDeviceResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  available_devices_.MergeFrom(from.available_devices_);
  if (from.has_current_device()) {
    mutable_current_device()->::tsumaki::Device::MergeFrom(from.current_device());
  }
}

void SetupDeviceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tsumaki.SetupDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupDeviceResponse::CopyFrom(const SetupDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tsumaki.SetupDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupDeviceResponse::IsInitialized() const {

  return true;
}

void SetupDeviceResponse::Swap(SetupDeviceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetupDeviceResponse::InternalSwap(SetupDeviceResponse* other) {
  std::swap(current_device_, other->current_device_);
  available_devices_.UnsafeArenaSwap(&other->available_devices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetupDeviceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetupDeviceResponse_descriptor_;
  metadata.reflection = SetupDeviceResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetupDeviceResponse

// optional .tsumaki.Device current_device = 1;
bool SetupDeviceResponse::has_current_device() const {
  return !_is_default_instance_ && current_device_ != NULL;
}
void SetupDeviceResponse::clear_current_device() {
  if (GetArenaNoVirtual() == NULL && current_device_ != NULL) delete current_device_;
  current_device_ = NULL;
}
const ::tsumaki::Device& SetupDeviceResponse::current_device() const {
  // @@protoc_insertion_point(field_get:tsumaki.SetupDeviceResponse.current_device)
  return current_device_ != NULL ? *current_device_ : *default_instance_->current_device_;
}
::tsumaki::Device* SetupDeviceResponse::mutable_current_device() {
  
  if (current_device_ == NULL) {
    current_device_ = new ::tsumaki::Device;
  }
  // @@protoc_insertion_point(field_mutable:tsumaki.SetupDeviceResponse.current_device)
  return current_device_;
}
::tsumaki::Device* SetupDeviceResponse::release_current_device() {
  // @@protoc_insertion_point(field_release:tsumaki.SetupDeviceResponse.current_device)
  
  ::tsumaki::Device* temp = current_device_;
  current_device_ = NULL;
  return temp;
}
void SetupDeviceResponse::set_allocated_current_device(::tsumaki::Device* current_device) {
  delete current_device_;
  current_device_ = current_device;
  if (current_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tsumaki.SetupDeviceResponse.current_device)
}

// repeated .tsumaki.Device available_devices = 2;
int SetupDeviceResponse::available_devices_size() const {
  return available_devices_.size();
}
void SetupDeviceResponse::clear_available_devices() {
  available_devices_.Clear();
}
const ::tsumaki::Device& SetupDeviceResponse::available_devices(int index) const {
  // @@protoc_insertion_point(field_get:tsumaki.SetupDeviceResponse.available_devices)
  return available_devices_.Get(index);
}
::tsumaki::Device* SetupDeviceResponse::mutable_available_devices(int index) {
  // @@protoc_insertion_point(field_mutable:tsumaki.SetupDeviceResponse.available_devices)
  return available_devices_.Mutable(index);
}
::tsumaki::Device* SetupDeviceResponse::add_available_devices() {
  // @@protoc_insertion_point(field_add:tsumaki.SetupDeviceResponse.available_devices)
  return available_devices_.Add();
}
::google::protobuf::RepeatedPtrField< ::tsumaki::Device >*
SetupDeviceResponse::mutable_available_devices() {
  // @@protoc_insertion_point(field_mutable_list:tsumaki.SetupDeviceResponse.available_devices)
  return &available_devices_;
}
const ::google::protobuf::RepeatedPtrField< ::tsumaki::Device >&
SetupDeviceResponse::available_devices() const {
  // @@protoc_insertion_point(field_list:tsumaki.SetupDeviceResponse.available_devices)
  return available_devices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tsumaki

// @@protoc_insertion_point(global_scope)
