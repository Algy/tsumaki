// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RGBAImage.proto

#ifndef PROTOBUF_RGBAImage_2eproto__INCLUDED
#define PROTOBUF_RGBAImage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tsumaki {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_RGBAImage_2eproto();
void protobuf_AssignDesc_RGBAImage_2eproto();
void protobuf_ShutdownFile_RGBAImage_2eproto();

class RGBAImage;

// ===================================================================

class RGBAImage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsumaki.RGBAImage) */ {
 public:
  RGBAImage();
  virtual ~RGBAImage();

  RGBAImage(const RGBAImage& from);

  inline RGBAImage& operator=(const RGBAImage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RGBAImage& default_instance();

  void Swap(RGBAImage* other);

  // implements Message ----------------------------------------------

  inline RGBAImage* New() const { return New(NULL); }

  RGBAImage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RGBAImage& from);
  void MergeFrom(const RGBAImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RGBAImage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // optional bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:tsumaki.RGBAImage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_RGBAImage_2eproto();
  friend void protobuf_AssignDesc_RGBAImage_2eproto();
  friend void protobuf_ShutdownFile_RGBAImage_2eproto();

  void InitAsDefaultInstance();
  static RGBAImage* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RGBAImage

// optional int32 width = 1;
inline void RGBAImage::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 RGBAImage::width() const {
  // @@protoc_insertion_point(field_get:tsumaki.RGBAImage.width)
  return width_;
}
inline void RGBAImage::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.RGBAImage.width)
}

// optional int32 height = 2;
inline void RGBAImage::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 RGBAImage::height() const {
  // @@protoc_insertion_point(field_get:tsumaki.RGBAImage.height)
  return height_;
}
inline void RGBAImage::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.RGBAImage.height)
}

// optional bytes data = 3;
inline void RGBAImage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RGBAImage::data() const {
  // @@protoc_insertion_point(field_get:tsumaki.RGBAImage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RGBAImage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.RGBAImage.data)
}
inline void RGBAImage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.RGBAImage.data)
}
inline void RGBAImage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.RGBAImage.data)
}
inline ::std::string* RGBAImage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.RGBAImage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RGBAImage::release_data() {
  // @@protoc_insertion_point(field_release:tsumaki.RGBAImage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RGBAImage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.RGBAImage.data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tsumaki

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RGBAImage_2eproto__INCLUDED
