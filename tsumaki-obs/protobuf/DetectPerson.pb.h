// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DetectPerson.proto

#ifndef PROTOBUF_DetectPerson_2eproto__INCLUDED
#define PROTOBUF_DetectPerson_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "RGBAImage.pb.h"
#include "MaskImage.pb.h"
// @@protoc_insertion_point(includes)

namespace tsumaki {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_DetectPerson_2eproto();
void protobuf_AssignDesc_DetectPerson_2eproto();
void protobuf_ShutdownFile_DetectPerson_2eproto();

class DetectPersonRequest;
class DetectPersonRequest_NeuralParameter;
class DetectPersonResponse;

// ===================================================================

class DetectPersonRequest_NeuralParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsumaki.DetectPersonRequest.NeuralParameter) */ {
 public:
  DetectPersonRequest_NeuralParameter();
  virtual ~DetectPersonRequest_NeuralParameter();

  DetectPersonRequest_NeuralParameter(const DetectPersonRequest_NeuralParameter& from);

  inline DetectPersonRequest_NeuralParameter& operator=(const DetectPersonRequest_NeuralParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectPersonRequest_NeuralParameter& default_instance();

  void Swap(DetectPersonRequest_NeuralParameter* other);

  // implements Message ----------------------------------------------

  inline DetectPersonRequest_NeuralParameter* New() const { return New(NULL); }

  DetectPersonRequest_NeuralParameter* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectPersonRequest_NeuralParameter& from);
  void MergeFrom(const DetectPersonRequest_NeuralParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetectPersonRequest_NeuralParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string branch = 1;
  void clear_branch();
  static const int kBranchFieldNumber = 1;
  const ::std::string& branch() const;
  void set_branch(const ::std::string& value);
  void set_branch(const char* value);
  void set_branch(const char* value, size_t size);
  ::std::string* mutable_branch();
  ::std::string* release_branch();
  void set_allocated_branch(::std::string* branch);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string version = 3;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional uint32 dimension = 4;
  void clear_dimension();
  static const int kDimensionFieldNumber = 4;
  ::google::protobuf::uint32 dimension() const;
  void set_dimension(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tsumaki.DetectPersonRequest.NeuralParameter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr branch_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::uint32 dimension_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_DetectPerson_2eproto();
  friend void protobuf_AssignDesc_DetectPerson_2eproto();
  friend void protobuf_ShutdownFile_DetectPerson_2eproto();

  void InitAsDefaultInstance();
  static DetectPersonRequest_NeuralParameter* default_instance_;
};
// -------------------------------------------------------------------

class DetectPersonRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsumaki.DetectPersonRequest) */ {
 public:
  DetectPersonRequest();
  virtual ~DetectPersonRequest();

  DetectPersonRequest(const DetectPersonRequest& from);

  inline DetectPersonRequest& operator=(const DetectPersonRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectPersonRequest& default_instance();

  void Swap(DetectPersonRequest* other);

  // implements Message ----------------------------------------------

  inline DetectPersonRequest* New() const { return New(NULL); }

  DetectPersonRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectPersonRequest& from);
  void MergeFrom(const DetectPersonRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetectPersonRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DetectPersonRequest_NeuralParameter NeuralParameter;

  // accessors -------------------------------------------------------

  // optional .tsumaki.RGBAImage image = 1;
  bool has_image() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  const ::tsumaki::RGBAImage& image() const;
  ::tsumaki::RGBAImage* mutable_image();
  ::tsumaki::RGBAImage* release_image();
  void set_allocated_image(::tsumaki::RGBAImage* image);

  // optional uint32 base_dimension = 2;
  void clear_base_dimension();
  static const int kBaseDimensionFieldNumber = 2;
  ::google::protobuf::uint32 base_dimension() const;
  void set_base_dimension(::google::protobuf::uint32 value);

  // optional .tsumaki.DetectPersonRequest.NeuralParameter neural_param = 3;
  bool has_neural_param() const;
  void clear_neural_param();
  static const int kNeuralParamFieldNumber = 3;
  const ::tsumaki::DetectPersonRequest_NeuralParameter& neural_param() const;
  ::tsumaki::DetectPersonRequest_NeuralParameter* mutable_neural_param();
  ::tsumaki::DetectPersonRequest_NeuralParameter* release_neural_param();
  void set_allocated_neural_param(::tsumaki::DetectPersonRequest_NeuralParameter* neural_param);

  // @@protoc_insertion_point(class_scope:tsumaki.DetectPersonRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tsumaki::RGBAImage* image_;
  ::tsumaki::DetectPersonRequest_NeuralParameter* neural_param_;
  ::google::protobuf::uint32 base_dimension_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_DetectPerson_2eproto();
  friend void protobuf_AssignDesc_DetectPerson_2eproto();
  friend void protobuf_ShutdownFile_DetectPerson_2eproto();

  void InitAsDefaultInstance();
  static DetectPersonRequest* default_instance_;
};
// -------------------------------------------------------------------

class DetectPersonResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsumaki.DetectPersonResponse) */ {
 public:
  DetectPersonResponse();
  virtual ~DetectPersonResponse();

  DetectPersonResponse(const DetectPersonResponse& from);

  inline DetectPersonResponse& operator=(const DetectPersonResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectPersonResponse& default_instance();

  void Swap(DetectPersonResponse* other);

  // implements Message ----------------------------------------------

  inline DetectPersonResponse* New() const { return New(NULL); }

  DetectPersonResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectPersonResponse& from);
  void MergeFrom(const DetectPersonResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetectPersonResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tsumaki.MaskImage mask = 1;
  bool has_mask() const;
  void clear_mask();
  static const int kMaskFieldNumber = 1;
  const ::tsumaki::MaskImage& mask() const;
  ::tsumaki::MaskImage* mutable_mask();
  ::tsumaki::MaskImage* release_mask();
  void set_allocated_mask(::tsumaki::MaskImage* mask);

  // @@protoc_insertion_point(class_scope:tsumaki.DetectPersonResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tsumaki::MaskImage* mask_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_DetectPerson_2eproto();
  friend void protobuf_AssignDesc_DetectPerson_2eproto();
  friend void protobuf_ShutdownFile_DetectPerson_2eproto();

  void InitAsDefaultInstance();
  static DetectPersonResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectPersonRequest_NeuralParameter

// optional string branch = 1;
inline void DetectPersonRequest_NeuralParameter::clear_branch() {
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetectPersonRequest_NeuralParameter::branch() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.NeuralParameter.branch)
  return branch_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectPersonRequest_NeuralParameter::set_branch(const ::std::string& value) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.DetectPersonRequest.NeuralParameter.branch)
}
inline void DetectPersonRequest_NeuralParameter::set_branch(const char* value) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.DetectPersonRequest.NeuralParameter.branch)
}
inline void DetectPersonRequest_NeuralParameter::set_branch(const char* value, size_t size) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.DetectPersonRequest.NeuralParameter.branch)
}
inline ::std::string* DetectPersonRequest_NeuralParameter::mutable_branch() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonRequest.NeuralParameter.branch)
  return branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectPersonRequest_NeuralParameter::release_branch() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonRequest.NeuralParameter.branch)
  
  return branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectPersonRequest_NeuralParameter::set_allocated_branch(::std::string* branch) {
  if (branch != NULL) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonRequest.NeuralParameter.branch)
}

// optional string name = 2;
inline void DetectPersonRequest_NeuralParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetectPersonRequest_NeuralParameter::name() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.NeuralParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectPersonRequest_NeuralParameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.DetectPersonRequest.NeuralParameter.name)
}
inline void DetectPersonRequest_NeuralParameter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.DetectPersonRequest.NeuralParameter.name)
}
inline void DetectPersonRequest_NeuralParameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.DetectPersonRequest.NeuralParameter.name)
}
inline ::std::string* DetectPersonRequest_NeuralParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonRequest.NeuralParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectPersonRequest_NeuralParameter::release_name() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonRequest.NeuralParameter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectPersonRequest_NeuralParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonRequest.NeuralParameter.name)
}

// optional string version = 3;
inline void DetectPersonRequest_NeuralParameter::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetectPersonRequest_NeuralParameter::version() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.NeuralParameter.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectPersonRequest_NeuralParameter::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.DetectPersonRequest.NeuralParameter.version)
}
inline void DetectPersonRequest_NeuralParameter::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.DetectPersonRequest.NeuralParameter.version)
}
inline void DetectPersonRequest_NeuralParameter::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.DetectPersonRequest.NeuralParameter.version)
}
inline ::std::string* DetectPersonRequest_NeuralParameter::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonRequest.NeuralParameter.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetectPersonRequest_NeuralParameter::release_version() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonRequest.NeuralParameter.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetectPersonRequest_NeuralParameter::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonRequest.NeuralParameter.version)
}

// optional uint32 dimension = 4;
inline void DetectPersonRequest_NeuralParameter::clear_dimension() {
  dimension_ = 0u;
}
inline ::google::protobuf::uint32 DetectPersonRequest_NeuralParameter::dimension() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.NeuralParameter.dimension)
  return dimension_;
}
inline void DetectPersonRequest_NeuralParameter::set_dimension(::google::protobuf::uint32 value) {
  
  dimension_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.DetectPersonRequest.NeuralParameter.dimension)
}

// -------------------------------------------------------------------

// DetectPersonRequest

// optional .tsumaki.RGBAImage image = 1;
inline bool DetectPersonRequest::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
inline void DetectPersonRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
inline const ::tsumaki::RGBAImage& DetectPersonRequest::image() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::tsumaki::RGBAImage* DetectPersonRequest::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::tsumaki::RGBAImage;
  }
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonRequest.image)
  return image_;
}
inline ::tsumaki::RGBAImage* DetectPersonRequest::release_image() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonRequest.image)
  
  ::tsumaki::RGBAImage* temp = image_;
  image_ = NULL;
  return temp;
}
inline void DetectPersonRequest::set_allocated_image(::tsumaki::RGBAImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonRequest.image)
}

// optional uint32 base_dimension = 2;
inline void DetectPersonRequest::clear_base_dimension() {
  base_dimension_ = 0u;
}
inline ::google::protobuf::uint32 DetectPersonRequest::base_dimension() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.base_dimension)
  return base_dimension_;
}
inline void DetectPersonRequest::set_base_dimension(::google::protobuf::uint32 value) {
  
  base_dimension_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.DetectPersonRequest.base_dimension)
}

// optional .tsumaki.DetectPersonRequest.NeuralParameter neural_param = 3;
inline bool DetectPersonRequest::has_neural_param() const {
  return !_is_default_instance_ && neural_param_ != NULL;
}
inline void DetectPersonRequest::clear_neural_param() {
  if (GetArenaNoVirtual() == NULL && neural_param_ != NULL) delete neural_param_;
  neural_param_ = NULL;
}
inline const ::tsumaki::DetectPersonRequest_NeuralParameter& DetectPersonRequest::neural_param() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.neural_param)
  return neural_param_ != NULL ? *neural_param_ : *default_instance_->neural_param_;
}
inline ::tsumaki::DetectPersonRequest_NeuralParameter* DetectPersonRequest::mutable_neural_param() {
  
  if (neural_param_ == NULL) {
    neural_param_ = new ::tsumaki::DetectPersonRequest_NeuralParameter;
  }
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonRequest.neural_param)
  return neural_param_;
}
inline ::tsumaki::DetectPersonRequest_NeuralParameter* DetectPersonRequest::release_neural_param() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonRequest.neural_param)
  
  ::tsumaki::DetectPersonRequest_NeuralParameter* temp = neural_param_;
  neural_param_ = NULL;
  return temp;
}
inline void DetectPersonRequest::set_allocated_neural_param(::tsumaki::DetectPersonRequest_NeuralParameter* neural_param) {
  delete neural_param_;
  neural_param_ = neural_param;
  if (neural_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonRequest.neural_param)
}

// -------------------------------------------------------------------

// DetectPersonResponse

// optional .tsumaki.MaskImage mask = 1;
inline bool DetectPersonResponse::has_mask() const {
  return !_is_default_instance_ && mask_ != NULL;
}
inline void DetectPersonResponse::clear_mask() {
  if (GetArenaNoVirtual() == NULL && mask_ != NULL) delete mask_;
  mask_ = NULL;
}
inline const ::tsumaki::MaskImage& DetectPersonResponse::mask() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonResponse.mask)
  return mask_ != NULL ? *mask_ : *default_instance_->mask_;
}
inline ::tsumaki::MaskImage* DetectPersonResponse::mutable_mask() {
  
  if (mask_ == NULL) {
    mask_ = new ::tsumaki::MaskImage;
  }
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonResponse.mask)
  return mask_;
}
inline ::tsumaki::MaskImage* DetectPersonResponse::release_mask() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonResponse.mask)
  
  ::tsumaki::MaskImage* temp = mask_;
  mask_ = NULL;
  return temp;
}
inline void DetectPersonResponse::set_allocated_mask(::tsumaki::MaskImage* mask) {
  delete mask_;
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonResponse.mask)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tsumaki

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DetectPerson_2eproto__INCLUDED
