// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RGBAImage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RGBAImage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tsumaki {

namespace {

const ::google::protobuf::Descriptor* RGBAImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RGBAImage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RGBAImage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_RGBAImage_2eproto() {
  protobuf_AddDesc_RGBAImage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RGBAImage.proto");
  GOOGLE_CHECK(file != NULL);
  RGBAImage_descriptor_ = file->message_type(0);
  static const int RGBAImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGBAImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGBAImage, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGBAImage, data_),
  };
  RGBAImage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RGBAImage_descriptor_,
      RGBAImage::default_instance_,
      RGBAImage_offsets_,
      -1,
      -1,
      -1,
      sizeof(RGBAImage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGBAImage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RGBAImage, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RGBAImage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RGBAImage_descriptor_, &RGBAImage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RGBAImage_2eproto() {
  delete RGBAImage::default_instance_;
  delete RGBAImage_reflection_;
}

void protobuf_AddDesc_RGBAImage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_RGBAImage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RGBAImage.proto\022\007tsumaki\"8\n\tRGBAImage\022"
    "\r\n\005width\030\001 \001(\005\022\016\n\006height\030\002 \001(\005\022\014\n\004data\030\003"
    " \001(\014B\002H\001b\006proto3", 96);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RGBAImage.proto", &protobuf_RegisterTypes);
  RGBAImage::default_instance_ = new RGBAImage();
  RGBAImage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RGBAImage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RGBAImage_2eproto {
  StaticDescriptorInitializer_RGBAImage_2eproto() {
    protobuf_AddDesc_RGBAImage_2eproto();
  }
} static_descriptor_initializer_RGBAImage_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RGBAImage::kWidthFieldNumber;
const int RGBAImage::kHeightFieldNumber;
const int RGBAImage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RGBAImage::RGBAImage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsumaki.RGBAImage)
}

void RGBAImage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RGBAImage::RGBAImage(const RGBAImage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsumaki.RGBAImage)
}

void RGBAImage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RGBAImage::~RGBAImage() {
  // @@protoc_insertion_point(destructor:tsumaki.RGBAImage)
  SharedDtor();
}

void RGBAImage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RGBAImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RGBAImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RGBAImage_descriptor_;
}

const RGBAImage& RGBAImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RGBAImage_2eproto();
  return *default_instance_;
}

RGBAImage* RGBAImage::default_instance_ = NULL;

RGBAImage* RGBAImage::New(::google::protobuf::Arena* arena) const {
  RGBAImage* n = new RGBAImage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RGBAImage::Clear() {
// @@protoc_insertion_point(message_clear_start:tsumaki.RGBAImage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RGBAImage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RGBAImage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RGBAImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsumaki.RGBAImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // optional int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsumaki.RGBAImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsumaki.RGBAImage)
  return false;
#undef DO_
}

void RGBAImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsumaki.RGBAImage)
  // optional int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:tsumaki.RGBAImage)
}

::google::protobuf::uint8* RGBAImage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsumaki.RGBAImage)
  // optional int32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tsumaki.RGBAImage)
  return target;
}

int RGBAImage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tsumaki.RGBAImage)
  int total_size = 0;

  // optional int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RGBAImage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tsumaki.RGBAImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RGBAImage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RGBAImage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tsumaki.RGBAImage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tsumaki.RGBAImage)
    MergeFrom(*source);
  }
}

void RGBAImage::MergeFrom(const RGBAImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tsumaki.RGBAImage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void RGBAImage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tsumaki.RGBAImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RGBAImage::CopyFrom(const RGBAImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tsumaki.RGBAImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RGBAImage::IsInitialized() const {

  return true;
}

void RGBAImage::Swap(RGBAImage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RGBAImage::InternalSwap(RGBAImage* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RGBAImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RGBAImage_descriptor_;
  metadata.reflection = RGBAImage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RGBAImage

// optional int32 width = 1;
void RGBAImage::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 RGBAImage::width() const {
  // @@protoc_insertion_point(field_get:tsumaki.RGBAImage.width)
  return width_;
}
 void RGBAImage::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.RGBAImage.width)
}

// optional int32 height = 2;
void RGBAImage::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 RGBAImage::height() const {
  // @@protoc_insertion_point(field_get:tsumaki.RGBAImage.height)
  return height_;
}
 void RGBAImage::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.RGBAImage.height)
}

// optional bytes data = 3;
void RGBAImage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RGBAImage::data() const {
  // @@protoc_insertion_point(field_get:tsumaki.RGBAImage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RGBAImage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.RGBAImage.data)
}
 void RGBAImage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.RGBAImage.data)
}
 void RGBAImage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.RGBAImage.data)
}
 ::std::string* RGBAImage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.RGBAImage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RGBAImage::release_data() {
  // @@protoc_insertion_point(field_release:tsumaki.RGBAImage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RGBAImage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.RGBAImage.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tsumaki

// @@protoc_insertion_point(global_scope)
