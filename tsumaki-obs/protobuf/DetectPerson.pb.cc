// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DetectPerson.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DetectPerson.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tsumaki {

namespace {

const ::google::protobuf::Descriptor* DetectPersonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectPersonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectPersonRequest_NeuralParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectPersonRequest_NeuralParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectPersonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectPersonResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DetectPerson_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_DetectPerson_2eproto() {
  protobuf_AddDesc_DetectPerson_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DetectPerson.proto");
  GOOGLE_CHECK(file != NULL);
  DetectPersonRequest_descriptor_ = file->message_type(0);
  static const int DetectPersonRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest, base_dimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest, neural_param_),
  };
  DetectPersonRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectPersonRequest_descriptor_,
      DetectPersonRequest::default_instance_,
      DetectPersonRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DetectPersonRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest, _is_default_instance_));
  DetectPersonRequest_NeuralParameter_descriptor_ = DetectPersonRequest_descriptor_->nested_type(0);
  static const int DetectPersonRequest_NeuralParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest_NeuralParameter, branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest_NeuralParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest_NeuralParameter, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest_NeuralParameter, dimension_),
  };
  DetectPersonRequest_NeuralParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectPersonRequest_NeuralParameter_descriptor_,
      DetectPersonRequest_NeuralParameter::default_instance_,
      DetectPersonRequest_NeuralParameter_offsets_,
      -1,
      -1,
      -1,
      sizeof(DetectPersonRequest_NeuralParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest_NeuralParameter, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonRequest_NeuralParameter, _is_default_instance_));
  DetectPersonResponse_descriptor_ = file->message_type(1);
  static const int DetectPersonResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonResponse, mask_),
  };
  DetectPersonResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetectPersonResponse_descriptor_,
      DetectPersonResponse::default_instance_,
      DetectPersonResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DetectPersonResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectPersonResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DetectPerson_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectPersonRequest_descriptor_, &DetectPersonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectPersonRequest_NeuralParameter_descriptor_, &DetectPersonRequest_NeuralParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetectPersonResponse_descriptor_, &DetectPersonResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DetectPerson_2eproto() {
  delete DetectPersonRequest::default_instance_;
  delete DetectPersonRequest_reflection_;
  delete DetectPersonRequest_NeuralParameter::default_instance_;
  delete DetectPersonRequest_NeuralParameter_reflection_;
  delete DetectPersonResponse::default_instance_;
  delete DetectPersonResponse_reflection_;
}

void protobuf_AddDesc_DetectPerson_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_DetectPerson_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tsumaki::protobuf_AddDesc_RGBAImage_2eproto();
  ::tsumaki::protobuf_AddDesc_MaskImage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022DetectPerson.proto\022\007tsumaki\032\017RGBAImage"
    ".proto\032\017MaskImage.proto\"\351\001\n\023DetectPerson"
    "Request\022!\n\005image\030\001 \001(\0132\022.tsumaki.RGBAIma"
    "ge\022\026\n\016base_dimension\030\002 \001(\r\022B\n\014neural_par"
    "am\030\003 \001(\0132,.tsumaki.DetectPersonRequest.N"
    "euralParameter\032S\n\017NeuralParameter\022\016\n\006bra"
    "nch\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\017\n\007version\030\003 \001(\t"
    "\022\021\n\tdimension\030\004 \001(\r\"8\n\024DetectPersonRespo"
    "nse\022 \n\004mask\030\001 \001(\0132\022.tsumaki.MaskImage2b\n"
    "\023DetectPersonService\022K\n\014DetectPerson\022\034.t"
    "sumaki.DetectPersonRequest\032\035.tsumaki.Det"
    "ectPersonResponseB\002H\001b\006proto3", 469);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DetectPerson.proto", &protobuf_RegisterTypes);
  DetectPersonRequest::default_instance_ = new DetectPersonRequest();
  DetectPersonRequest_NeuralParameter::default_instance_ = new DetectPersonRequest_NeuralParameter();
  DetectPersonResponse::default_instance_ = new DetectPersonResponse();
  DetectPersonRequest::default_instance_->InitAsDefaultInstance();
  DetectPersonRequest_NeuralParameter::default_instance_->InitAsDefaultInstance();
  DetectPersonResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DetectPerson_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DetectPerson_2eproto {
  StaticDescriptorInitializer_DetectPerson_2eproto() {
    protobuf_AddDesc_DetectPerson_2eproto();
  }
} static_descriptor_initializer_DetectPerson_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectPersonRequest_NeuralParameter::kBranchFieldNumber;
const int DetectPersonRequest_NeuralParameter::kNameFieldNumber;
const int DetectPersonRequest_NeuralParameter::kVersionFieldNumber;
const int DetectPersonRequest_NeuralParameter::kDimensionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectPersonRequest_NeuralParameter::DetectPersonRequest_NeuralParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsumaki.DetectPersonRequest.NeuralParameter)
}

void DetectPersonRequest_NeuralParameter::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DetectPersonRequest_NeuralParameter::DetectPersonRequest_NeuralParameter(const DetectPersonRequest_NeuralParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsumaki.DetectPersonRequest.NeuralParameter)
}

void DetectPersonRequest_NeuralParameter::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  branch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dimension_ = 0u;
}

DetectPersonRequest_NeuralParameter::~DetectPersonRequest_NeuralParameter() {
  // @@protoc_insertion_point(destructor:tsumaki.DetectPersonRequest.NeuralParameter)
  SharedDtor();
}

void DetectPersonRequest_NeuralParameter::SharedDtor() {
  branch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DetectPersonRequest_NeuralParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectPersonRequest_NeuralParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectPersonRequest_NeuralParameter_descriptor_;
}

const DetectPersonRequest_NeuralParameter& DetectPersonRequest_NeuralParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DetectPerson_2eproto();
  return *default_instance_;
}

DetectPersonRequest_NeuralParameter* DetectPersonRequest_NeuralParameter::default_instance_ = NULL;

DetectPersonRequest_NeuralParameter* DetectPersonRequest_NeuralParameter::New(::google::protobuf::Arena* arena) const {
  DetectPersonRequest_NeuralParameter* n = new DetectPersonRequest_NeuralParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectPersonRequest_NeuralParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:tsumaki.DetectPersonRequest.NeuralParameter)
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dimension_ = 0u;
}

bool DetectPersonRequest_NeuralParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsumaki.DetectPersonRequest.NeuralParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string branch = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_branch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->branch().data(), this->branch().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tsumaki.DetectPersonRequest.NeuralParameter.branch"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tsumaki.DetectPersonRequest.NeuralParameter.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tsumaki.DetectPersonRequest.NeuralParameter.version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dimension;
        break;
      }

      // optional uint32 dimension = 4;
      case 4: {
        if (tag == 32) {
         parse_dimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dimension_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsumaki.DetectPersonRequest.NeuralParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsumaki.DetectPersonRequest.NeuralParameter)
  return false;
#undef DO_
}

void DetectPersonRequest_NeuralParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsumaki.DetectPersonRequest.NeuralParameter)
  // optional string branch = 1;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), this->branch().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.DetectPersonRequest.NeuralParameter.branch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->branch(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.DetectPersonRequest.NeuralParameter.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.DetectPersonRequest.NeuralParameter.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  // optional uint32 dimension = 4;
  if (this->dimension() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dimension(), output);
  }

  // @@protoc_insertion_point(serialize_end:tsumaki.DetectPersonRequest.NeuralParameter)
}

::google::protobuf::uint8* DetectPersonRequest_NeuralParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsumaki.DetectPersonRequest.NeuralParameter)
  // optional string branch = 1;
  if (this->branch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->branch().data(), this->branch().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.DetectPersonRequest.NeuralParameter.branch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->branch(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.DetectPersonRequest.NeuralParameter.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string version = 3;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tsumaki.DetectPersonRequest.NeuralParameter.version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional uint32 dimension = 4;
  if (this->dimension() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dimension(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tsumaki.DetectPersonRequest.NeuralParameter)
  return target;
}

int DetectPersonRequest_NeuralParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tsumaki.DetectPersonRequest.NeuralParameter)
  int total_size = 0;

  // optional string branch = 1;
  if (this->branch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->branch());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // optional uint32 dimension = 4;
  if (this->dimension() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dimension());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectPersonRequest_NeuralParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tsumaki.DetectPersonRequest.NeuralParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectPersonRequest_NeuralParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectPersonRequest_NeuralParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tsumaki.DetectPersonRequest.NeuralParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tsumaki.DetectPersonRequest.NeuralParameter)
    MergeFrom(*source);
  }
}

void DetectPersonRequest_NeuralParameter::MergeFrom(const DetectPersonRequest_NeuralParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tsumaki.DetectPersonRequest.NeuralParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.branch().size() > 0) {

    branch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.branch_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.dimension() != 0) {
    set_dimension(from.dimension());
  }
}

void DetectPersonRequest_NeuralParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tsumaki.DetectPersonRequest.NeuralParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectPersonRequest_NeuralParameter::CopyFrom(const DetectPersonRequest_NeuralParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tsumaki.DetectPersonRequest.NeuralParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectPersonRequest_NeuralParameter::IsInitialized() const {

  return true;
}

void DetectPersonRequest_NeuralParameter::Swap(DetectPersonRequest_NeuralParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectPersonRequest_NeuralParameter::InternalSwap(DetectPersonRequest_NeuralParameter* other) {
  branch_.Swap(&other->branch_);
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  std::swap(dimension_, other->dimension_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectPersonRequest_NeuralParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectPersonRequest_NeuralParameter_descriptor_;
  metadata.reflection = DetectPersonRequest_NeuralParameter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectPersonRequest::kImageFieldNumber;
const int DetectPersonRequest::kBaseDimensionFieldNumber;
const int DetectPersonRequest::kNeuralParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectPersonRequest::DetectPersonRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsumaki.DetectPersonRequest)
}

void DetectPersonRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  image_ = const_cast< ::tsumaki::RGBAImage*>(&::tsumaki::RGBAImage::default_instance());
  neural_param_ = const_cast< ::tsumaki::DetectPersonRequest_NeuralParameter*>(&::tsumaki::DetectPersonRequest_NeuralParameter::default_instance());
}

DetectPersonRequest::DetectPersonRequest(const DetectPersonRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsumaki.DetectPersonRequest)
}

void DetectPersonRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  image_ = NULL;
  base_dimension_ = 0u;
  neural_param_ = NULL;
}

DetectPersonRequest::~DetectPersonRequest() {
  // @@protoc_insertion_point(destructor:tsumaki.DetectPersonRequest)
  SharedDtor();
}

void DetectPersonRequest::SharedDtor() {
  if (this != default_instance_) {
    delete image_;
    delete neural_param_;
  }
}

void DetectPersonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectPersonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectPersonRequest_descriptor_;
}

const DetectPersonRequest& DetectPersonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DetectPerson_2eproto();
  return *default_instance_;
}

DetectPersonRequest* DetectPersonRequest::default_instance_ = NULL;

DetectPersonRequest* DetectPersonRequest::New(::google::protobuf::Arena* arena) const {
  DetectPersonRequest* n = new DetectPersonRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectPersonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tsumaki.DetectPersonRequest)
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
  base_dimension_ = 0u;
  if (GetArenaNoVirtual() == NULL && neural_param_ != NULL) delete neural_param_;
  neural_param_ = NULL;
}

bool DetectPersonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsumaki.DetectPersonRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tsumaki.RGBAImage image = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_base_dimension;
        break;
      }

      // optional uint32 base_dimension = 2;
      case 2: {
        if (tag == 16) {
         parse_base_dimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_dimension_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_neural_param;
        break;
      }

      // optional .tsumaki.DetectPersonRequest.NeuralParameter neural_param = 3;
      case 3: {
        if (tag == 26) {
         parse_neural_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_neural_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsumaki.DetectPersonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsumaki.DetectPersonRequest)
  return false;
#undef DO_
}

void DetectPersonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsumaki.DetectPersonRequest)
  // optional .tsumaki.RGBAImage image = 1;
  if (this->has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->image_, output);
  }

  // optional uint32 base_dimension = 2;
  if (this->base_dimension() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->base_dimension(), output);
  }

  // optional .tsumaki.DetectPersonRequest.NeuralParameter neural_param = 3;
  if (this->has_neural_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->neural_param_, output);
  }

  // @@protoc_insertion_point(serialize_end:tsumaki.DetectPersonRequest)
}

::google::protobuf::uint8* DetectPersonRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsumaki.DetectPersonRequest)
  // optional .tsumaki.RGBAImage image = 1;
  if (this->has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->image_, false, target);
  }

  // optional uint32 base_dimension = 2;
  if (this->base_dimension() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->base_dimension(), target);
  }

  // optional .tsumaki.DetectPersonRequest.NeuralParameter neural_param = 3;
  if (this->has_neural_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->neural_param_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tsumaki.DetectPersonRequest)
  return target;
}

int DetectPersonRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tsumaki.DetectPersonRequest)
  int total_size = 0;

  // optional .tsumaki.RGBAImage image = 1;
  if (this->has_image()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->image_);
  }

  // optional uint32 base_dimension = 2;
  if (this->base_dimension() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->base_dimension());
  }

  // optional .tsumaki.DetectPersonRequest.NeuralParameter neural_param = 3;
  if (this->has_neural_param()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->neural_param_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectPersonRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tsumaki.DetectPersonRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectPersonRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectPersonRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tsumaki.DetectPersonRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tsumaki.DetectPersonRequest)
    MergeFrom(*source);
  }
}

void DetectPersonRequest::MergeFrom(const DetectPersonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tsumaki.DetectPersonRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_image()) {
    mutable_image()->::tsumaki::RGBAImage::MergeFrom(from.image());
  }
  if (from.base_dimension() != 0) {
    set_base_dimension(from.base_dimension());
  }
  if (from.has_neural_param()) {
    mutable_neural_param()->::tsumaki::DetectPersonRequest_NeuralParameter::MergeFrom(from.neural_param());
  }
}

void DetectPersonRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tsumaki.DetectPersonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectPersonRequest::CopyFrom(const DetectPersonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tsumaki.DetectPersonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectPersonRequest::IsInitialized() const {

  return true;
}

void DetectPersonRequest::Swap(DetectPersonRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectPersonRequest::InternalSwap(DetectPersonRequest* other) {
  std::swap(image_, other->image_);
  std::swap(base_dimension_, other->base_dimension_);
  std::swap(neural_param_, other->neural_param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectPersonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectPersonRequest_descriptor_;
  metadata.reflection = DetectPersonRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectPersonRequest_NeuralParameter

// optional string branch = 1;
void DetectPersonRequest_NeuralParameter::clear_branch() {
  branch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DetectPersonRequest_NeuralParameter::branch() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.NeuralParameter.branch)
  return branch_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DetectPersonRequest_NeuralParameter::set_branch(const ::std::string& value) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.DetectPersonRequest.NeuralParameter.branch)
}
 void DetectPersonRequest_NeuralParameter::set_branch(const char* value) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.DetectPersonRequest.NeuralParameter.branch)
}
 void DetectPersonRequest_NeuralParameter::set_branch(const char* value, size_t size) {
  
  branch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.DetectPersonRequest.NeuralParameter.branch)
}
 ::std::string* DetectPersonRequest_NeuralParameter::mutable_branch() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonRequest.NeuralParameter.branch)
  return branch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DetectPersonRequest_NeuralParameter::release_branch() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonRequest.NeuralParameter.branch)
  
  return branch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DetectPersonRequest_NeuralParameter::set_allocated_branch(::std::string* branch) {
  if (branch != NULL) {
    
  } else {
    
  }
  branch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), branch);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonRequest.NeuralParameter.branch)
}

// optional string name = 2;
void DetectPersonRequest_NeuralParameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DetectPersonRequest_NeuralParameter::name() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.NeuralParameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DetectPersonRequest_NeuralParameter::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.DetectPersonRequest.NeuralParameter.name)
}
 void DetectPersonRequest_NeuralParameter::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.DetectPersonRequest.NeuralParameter.name)
}
 void DetectPersonRequest_NeuralParameter::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.DetectPersonRequest.NeuralParameter.name)
}
 ::std::string* DetectPersonRequest_NeuralParameter::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonRequest.NeuralParameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DetectPersonRequest_NeuralParameter::release_name() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonRequest.NeuralParameter.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DetectPersonRequest_NeuralParameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonRequest.NeuralParameter.name)
}

// optional string version = 3;
void DetectPersonRequest_NeuralParameter::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DetectPersonRequest_NeuralParameter::version() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.NeuralParameter.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DetectPersonRequest_NeuralParameter::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.DetectPersonRequest.NeuralParameter.version)
}
 void DetectPersonRequest_NeuralParameter::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.DetectPersonRequest.NeuralParameter.version)
}
 void DetectPersonRequest_NeuralParameter::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.DetectPersonRequest.NeuralParameter.version)
}
 ::std::string* DetectPersonRequest_NeuralParameter::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonRequest.NeuralParameter.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DetectPersonRequest_NeuralParameter::release_version() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonRequest.NeuralParameter.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DetectPersonRequest_NeuralParameter::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonRequest.NeuralParameter.version)
}

// optional uint32 dimension = 4;
void DetectPersonRequest_NeuralParameter::clear_dimension() {
  dimension_ = 0u;
}
 ::google::protobuf::uint32 DetectPersonRequest_NeuralParameter::dimension() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.NeuralParameter.dimension)
  return dimension_;
}
 void DetectPersonRequest_NeuralParameter::set_dimension(::google::protobuf::uint32 value) {
  
  dimension_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.DetectPersonRequest.NeuralParameter.dimension)
}

// -------------------------------------------------------------------

// DetectPersonRequest

// optional .tsumaki.RGBAImage image = 1;
bool DetectPersonRequest::has_image() const {
  return !_is_default_instance_ && image_ != NULL;
}
void DetectPersonRequest::clear_image() {
  if (GetArenaNoVirtual() == NULL && image_ != NULL) delete image_;
  image_ = NULL;
}
const ::tsumaki::RGBAImage& DetectPersonRequest::image() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
::tsumaki::RGBAImage* DetectPersonRequest::mutable_image() {
  
  if (image_ == NULL) {
    image_ = new ::tsumaki::RGBAImage;
  }
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonRequest.image)
  return image_;
}
::tsumaki::RGBAImage* DetectPersonRequest::release_image() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonRequest.image)
  
  ::tsumaki::RGBAImage* temp = image_;
  image_ = NULL;
  return temp;
}
void DetectPersonRequest::set_allocated_image(::tsumaki::RGBAImage* image) {
  delete image_;
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonRequest.image)
}

// optional uint32 base_dimension = 2;
void DetectPersonRequest::clear_base_dimension() {
  base_dimension_ = 0u;
}
 ::google::protobuf::uint32 DetectPersonRequest::base_dimension() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.base_dimension)
  return base_dimension_;
}
 void DetectPersonRequest::set_base_dimension(::google::protobuf::uint32 value) {
  
  base_dimension_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.DetectPersonRequest.base_dimension)
}

// optional .tsumaki.DetectPersonRequest.NeuralParameter neural_param = 3;
bool DetectPersonRequest::has_neural_param() const {
  return !_is_default_instance_ && neural_param_ != NULL;
}
void DetectPersonRequest::clear_neural_param() {
  if (GetArenaNoVirtual() == NULL && neural_param_ != NULL) delete neural_param_;
  neural_param_ = NULL;
}
const ::tsumaki::DetectPersonRequest_NeuralParameter& DetectPersonRequest::neural_param() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonRequest.neural_param)
  return neural_param_ != NULL ? *neural_param_ : *default_instance_->neural_param_;
}
::tsumaki::DetectPersonRequest_NeuralParameter* DetectPersonRequest::mutable_neural_param() {
  
  if (neural_param_ == NULL) {
    neural_param_ = new ::tsumaki::DetectPersonRequest_NeuralParameter;
  }
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonRequest.neural_param)
  return neural_param_;
}
::tsumaki::DetectPersonRequest_NeuralParameter* DetectPersonRequest::release_neural_param() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonRequest.neural_param)
  
  ::tsumaki::DetectPersonRequest_NeuralParameter* temp = neural_param_;
  neural_param_ = NULL;
  return temp;
}
void DetectPersonRequest::set_allocated_neural_param(::tsumaki::DetectPersonRequest_NeuralParameter* neural_param) {
  delete neural_param_;
  neural_param_ = neural_param;
  if (neural_param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonRequest.neural_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectPersonResponse::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectPersonResponse::DetectPersonResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tsumaki.DetectPersonResponse)
}

void DetectPersonResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  mask_ = const_cast< ::tsumaki::MaskImage*>(&::tsumaki::MaskImage::default_instance());
}

DetectPersonResponse::DetectPersonResponse(const DetectPersonResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tsumaki.DetectPersonResponse)
}

void DetectPersonResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  mask_ = NULL;
}

DetectPersonResponse::~DetectPersonResponse() {
  // @@protoc_insertion_point(destructor:tsumaki.DetectPersonResponse)
  SharedDtor();
}

void DetectPersonResponse::SharedDtor() {
  if (this != default_instance_) {
    delete mask_;
  }
}

void DetectPersonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectPersonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectPersonResponse_descriptor_;
}

const DetectPersonResponse& DetectPersonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DetectPerson_2eproto();
  return *default_instance_;
}

DetectPersonResponse* DetectPersonResponse::default_instance_ = NULL;

DetectPersonResponse* DetectPersonResponse::New(::google::protobuf::Arena* arena) const {
  DetectPersonResponse* n = new DetectPersonResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetectPersonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tsumaki.DetectPersonResponse)
  if (GetArenaNoVirtual() == NULL && mask_ != NULL) delete mask_;
  mask_ = NULL;
}

bool DetectPersonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tsumaki.DetectPersonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tsumaki.MaskImage mask = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tsumaki.DetectPersonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tsumaki.DetectPersonResponse)
  return false;
#undef DO_
}

void DetectPersonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tsumaki.DetectPersonResponse)
  // optional .tsumaki.MaskImage mask = 1;
  if (this->has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mask_, output);
  }

  // @@protoc_insertion_point(serialize_end:tsumaki.DetectPersonResponse)
}

::google::protobuf::uint8* DetectPersonResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tsumaki.DetectPersonResponse)
  // optional .tsumaki.MaskImage mask = 1;
  if (this->has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mask_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tsumaki.DetectPersonResponse)
  return target;
}

int DetectPersonResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:tsumaki.DetectPersonResponse)
  int total_size = 0;

  // optional .tsumaki.MaskImage mask = 1;
  if (this->has_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mask_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectPersonResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tsumaki.DetectPersonResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DetectPersonResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetectPersonResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tsumaki.DetectPersonResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tsumaki.DetectPersonResponse)
    MergeFrom(*source);
  }
}

void DetectPersonResponse::MergeFrom(const DetectPersonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tsumaki.DetectPersonResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_mask()) {
    mutable_mask()->::tsumaki::MaskImage::MergeFrom(from.mask());
  }
}

void DetectPersonResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tsumaki.DetectPersonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectPersonResponse::CopyFrom(const DetectPersonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tsumaki.DetectPersonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectPersonResponse::IsInitialized() const {

  return true;
}

void DetectPersonResponse::Swap(DetectPersonResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetectPersonResponse::InternalSwap(DetectPersonResponse* other) {
  std::swap(mask_, other->mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetectPersonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectPersonResponse_descriptor_;
  metadata.reflection = DetectPersonResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetectPersonResponse

// optional .tsumaki.MaskImage mask = 1;
bool DetectPersonResponse::has_mask() const {
  return !_is_default_instance_ && mask_ != NULL;
}
void DetectPersonResponse::clear_mask() {
  if (GetArenaNoVirtual() == NULL && mask_ != NULL) delete mask_;
  mask_ = NULL;
}
const ::tsumaki::MaskImage& DetectPersonResponse::mask() const {
  // @@protoc_insertion_point(field_get:tsumaki.DetectPersonResponse.mask)
  return mask_ != NULL ? *mask_ : *default_instance_->mask_;
}
::tsumaki::MaskImage* DetectPersonResponse::mutable_mask() {
  
  if (mask_ == NULL) {
    mask_ = new ::tsumaki::MaskImage;
  }
  // @@protoc_insertion_point(field_mutable:tsumaki.DetectPersonResponse.mask)
  return mask_;
}
::tsumaki::MaskImage* DetectPersonResponse::release_mask() {
  // @@protoc_insertion_point(field_release:tsumaki.DetectPersonResponse.mask)
  
  ::tsumaki::MaskImage* temp = mask_;
  mask_ = NULL;
  return temp;
}
void DetectPersonResponse::set_allocated_mask(::tsumaki::MaskImage* mask) {
  delete mask_;
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tsumaki.DetectPersonResponse.mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tsumaki

// @@protoc_insertion_point(global_scope)
