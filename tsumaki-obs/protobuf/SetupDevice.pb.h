// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SetupDevice.proto

#ifndef PROTOBUF_SetupDevice_2eproto__INCLUDED
#define PROTOBUF_SetupDevice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tsumaki {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_SetupDevice_2eproto();
void protobuf_AssignDesc_SetupDevice_2eproto();
void protobuf_ShutdownFile_SetupDevice_2eproto();

class Device;
class SetupDeviceRequest;
class SetupDeviceResponse;

// ===================================================================

class Device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsumaki.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Device& default_instance();

  void Swap(Device* other);

  // implements Message ----------------------------------------------

  inline Device* New() const { return New(NULL); }

  Device* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional bool experimental = 3;
  void clear_experimental();
  static const int kExperimentalFieldNumber = 3;
  bool experimental() const;
  void set_experimental(bool value);

  // @@protoc_insertion_point(class_scope:tsumaki.Device)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  bool experimental_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_SetupDevice_2eproto();
  friend void protobuf_AssignDesc_SetupDevice_2eproto();
  friend void protobuf_ShutdownFile_SetupDevice_2eproto();

  void InitAsDefaultInstance();
  static Device* default_instance_;
};
// -------------------------------------------------------------------

class SetupDeviceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsumaki.SetupDeviceRequest) */ {
 public:
  SetupDeviceRequest();
  virtual ~SetupDeviceRequest();

  SetupDeviceRequest(const SetupDeviceRequest& from);

  inline SetupDeviceRequest& operator=(const SetupDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetupDeviceRequest& default_instance();

  void Swap(SetupDeviceRequest* other);

  // implements Message ----------------------------------------------

  inline SetupDeviceRequest* New() const { return New(NULL); }

  SetupDeviceRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetupDeviceRequest& from);
  void MergeFrom(const SetupDeviceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetupDeviceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string target_device_id = 1;
  void clear_target_device_id();
  static const int kTargetDeviceIdFieldNumber = 1;
  const ::std::string& target_device_id() const;
  void set_target_device_id(const ::std::string& value);
  void set_target_device_id(const char* value);
  void set_target_device_id(const char* value, size_t size);
  ::std::string* mutable_target_device_id();
  ::std::string* release_target_device_id();
  void set_allocated_target_device_id(::std::string* target_device_id);

  // @@protoc_insertion_point(class_scope:tsumaki.SetupDeviceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr target_device_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_SetupDevice_2eproto();
  friend void protobuf_AssignDesc_SetupDevice_2eproto();
  friend void protobuf_ShutdownFile_SetupDevice_2eproto();

  void InitAsDefaultInstance();
  static SetupDeviceRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetupDeviceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tsumaki.SetupDeviceResponse) */ {
 public:
  SetupDeviceResponse();
  virtual ~SetupDeviceResponse();

  SetupDeviceResponse(const SetupDeviceResponse& from);

  inline SetupDeviceResponse& operator=(const SetupDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetupDeviceResponse& default_instance();

  void Swap(SetupDeviceResponse* other);

  // implements Message ----------------------------------------------

  inline SetupDeviceResponse* New() const { return New(NULL); }

  SetupDeviceResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetupDeviceResponse& from);
  void MergeFrom(const SetupDeviceResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetupDeviceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .tsumaki.Device current_device = 1;
  bool has_current_device() const;
  void clear_current_device();
  static const int kCurrentDeviceFieldNumber = 1;
  const ::tsumaki::Device& current_device() const;
  ::tsumaki::Device* mutable_current_device();
  ::tsumaki::Device* release_current_device();
  void set_allocated_current_device(::tsumaki::Device* current_device);

  // repeated .tsumaki.Device available_devices = 2;
  int available_devices_size() const;
  void clear_available_devices();
  static const int kAvailableDevicesFieldNumber = 2;
  const ::tsumaki::Device& available_devices(int index) const;
  ::tsumaki::Device* mutable_available_devices(int index);
  ::tsumaki::Device* add_available_devices();
  ::google::protobuf::RepeatedPtrField< ::tsumaki::Device >*
      mutable_available_devices();
  const ::google::protobuf::RepeatedPtrField< ::tsumaki::Device >&
      available_devices() const;

  // @@protoc_insertion_point(class_scope:tsumaki.SetupDeviceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::tsumaki::Device* current_device_;
  ::google::protobuf::RepeatedPtrField< ::tsumaki::Device > available_devices_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_SetupDevice_2eproto();
  friend void protobuf_AssignDesc_SetupDevice_2eproto();
  friend void protobuf_ShutdownFile_SetupDevice_2eproto();

  void InitAsDefaultInstance();
  static SetupDeviceResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Device

// optional string id = 1;
inline void Device::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::id() const {
  // @@protoc_insertion_point(field_get:tsumaki.Device.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.Device.id)
}
inline void Device::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.Device.id)
}
inline void Device::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.Device.id)
}
inline ::std::string* Device::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.Device.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_id() {
  // @@protoc_insertion_point(field_release:tsumaki.Device.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.Device.id)
}

// optional string description = 2;
inline void Device::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Device::description() const {
  // @@protoc_insertion_point(field_get:tsumaki.Device.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.Device.description)
}
inline void Device::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.Device.description)
}
inline void Device::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.Device.description)
}
inline ::std::string* Device::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.Device.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Device::release_description() {
  // @@protoc_insertion_point(field_release:tsumaki.Device.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.Device.description)
}

// optional bool experimental = 3;
inline void Device::clear_experimental() {
  experimental_ = false;
}
inline bool Device::experimental() const {
  // @@protoc_insertion_point(field_get:tsumaki.Device.experimental)
  return experimental_;
}
inline void Device::set_experimental(bool value) {
  
  experimental_ = value;
  // @@protoc_insertion_point(field_set:tsumaki.Device.experimental)
}

// -------------------------------------------------------------------

// SetupDeviceRequest

// optional string target_device_id = 1;
inline void SetupDeviceRequest::clear_target_device_id() {
  target_device_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetupDeviceRequest::target_device_id() const {
  // @@protoc_insertion_point(field_get:tsumaki.SetupDeviceRequest.target_device_id)
  return target_device_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupDeviceRequest::set_target_device_id(const ::std::string& value) {
  
  target_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tsumaki.SetupDeviceRequest.target_device_id)
}
inline void SetupDeviceRequest::set_target_device_id(const char* value) {
  
  target_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tsumaki.SetupDeviceRequest.target_device_id)
}
inline void SetupDeviceRequest::set_target_device_id(const char* value, size_t size) {
  
  target_device_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tsumaki.SetupDeviceRequest.target_device_id)
}
inline ::std::string* SetupDeviceRequest::mutable_target_device_id() {
  
  // @@protoc_insertion_point(field_mutable:tsumaki.SetupDeviceRequest.target_device_id)
  return target_device_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetupDeviceRequest::release_target_device_id() {
  // @@protoc_insertion_point(field_release:tsumaki.SetupDeviceRequest.target_device_id)
  
  return target_device_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetupDeviceRequest::set_allocated_target_device_id(::std::string* target_device_id) {
  if (target_device_id != NULL) {
    
  } else {
    
  }
  target_device_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_device_id);
  // @@protoc_insertion_point(field_set_allocated:tsumaki.SetupDeviceRequest.target_device_id)
}

// -------------------------------------------------------------------

// SetupDeviceResponse

// optional .tsumaki.Device current_device = 1;
inline bool SetupDeviceResponse::has_current_device() const {
  return !_is_default_instance_ && current_device_ != NULL;
}
inline void SetupDeviceResponse::clear_current_device() {
  if (GetArenaNoVirtual() == NULL && current_device_ != NULL) delete current_device_;
  current_device_ = NULL;
}
inline const ::tsumaki::Device& SetupDeviceResponse::current_device() const {
  // @@protoc_insertion_point(field_get:tsumaki.SetupDeviceResponse.current_device)
  return current_device_ != NULL ? *current_device_ : *default_instance_->current_device_;
}
inline ::tsumaki::Device* SetupDeviceResponse::mutable_current_device() {
  
  if (current_device_ == NULL) {
    current_device_ = new ::tsumaki::Device;
  }
  // @@protoc_insertion_point(field_mutable:tsumaki.SetupDeviceResponse.current_device)
  return current_device_;
}
inline ::tsumaki::Device* SetupDeviceResponse::release_current_device() {
  // @@protoc_insertion_point(field_release:tsumaki.SetupDeviceResponse.current_device)
  
  ::tsumaki::Device* temp = current_device_;
  current_device_ = NULL;
  return temp;
}
inline void SetupDeviceResponse::set_allocated_current_device(::tsumaki::Device* current_device) {
  delete current_device_;
  current_device_ = current_device;
  if (current_device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tsumaki.SetupDeviceResponse.current_device)
}

// repeated .tsumaki.Device available_devices = 2;
inline int SetupDeviceResponse::available_devices_size() const {
  return available_devices_.size();
}
inline void SetupDeviceResponse::clear_available_devices() {
  available_devices_.Clear();
}
inline const ::tsumaki::Device& SetupDeviceResponse::available_devices(int index) const {
  // @@protoc_insertion_point(field_get:tsumaki.SetupDeviceResponse.available_devices)
  return available_devices_.Get(index);
}
inline ::tsumaki::Device* SetupDeviceResponse::mutable_available_devices(int index) {
  // @@protoc_insertion_point(field_mutable:tsumaki.SetupDeviceResponse.available_devices)
  return available_devices_.Mutable(index);
}
inline ::tsumaki::Device* SetupDeviceResponse::add_available_devices() {
  // @@protoc_insertion_point(field_add:tsumaki.SetupDeviceResponse.available_devices)
  return available_devices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tsumaki::Device >*
SetupDeviceResponse::mutable_available_devices() {
  // @@protoc_insertion_point(field_mutable_list:tsumaki.SetupDeviceResponse.available_devices)
  return &available_devices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tsumaki::Device >&
SetupDeviceResponse::available_devices() const {
  // @@protoc_insertion_point(field_list:tsumaki.SetupDeviceResponse.available_devices)
  return available_devices_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tsumaki

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SetupDevice_2eproto__INCLUDED
